#include "/Includes/PRNG.compute"
#define UINTMAXVALUE 4294967295.0 
#define TAU 6.283185307179586

#pragma kernel CSMain
#pragma kernel GenerateLattice
#pragma kernel WrapLattice


struct GradientData {
    float2 vectors[4];
};

RWTexture2D<float4> _NoiseTexture;
RWStructuredBuffer<GradientData> _GradientBuffer;
bool _TileTexture;
uint _Seed; //? the value used to generate the random hash
uint _TexWidth; //? the width of the generated texture in pixels
uint _TexHeight; //? the height of the generated texture in pixels
uint _LatticeSizeX; //? the horizontal seperation of the lattice used to generate the noise in pixels
uint _LatticeSizeY; //? the vertical seperation of the lattice used to generate the noise in pixels
uint _LatticeTexWidth; //? Total width of the lattice texture
uint _LatticeTexHeight; //? Total height of the lattice texture

float2 RotateVec2(float2 vec, float radians) {
    return float2 (vec.x*cos(radians)-vec.y*sin(radians),vec.x*sin(radians)+vec.y*cos(radians));
}
uint LatticeToBufferIndex(uint2 latticeIndex) {
    return latticeIndex.x + latticeIndex.y*_LatticeTexWidth; 
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x < 0 || id.x >= _TexWidth || id.y < 0 || id.y >= _TexHeight) {return;}
    
    //? Figure out where we are in the lattice
    float2 globalLatticePos = id.xy / float2(_LatticeSizeX,_LatticeSizeY);
    float2 localLatticePos = frac(globalLatticePos);
    // int2 latticeIndex = floor(globalLatticePos);
    int2 latticeIndex = globalLatticePos - localLatticePos;
    bool onXEdge = uint(latticeIndex.x) == (_LatticeTexWidth - 1);
    bool onYEdge = uint(latticeIndex.y) == (_LatticeTexHeight - 1);
    float2 smoothedLocalLatticePos = localLatticePos * localLatticePos * (3.0 - 2.0 * localLatticePos); //?alternate cubic pos for smoother transitions
    float4 colA = 1; float4 colB = 1; float4 colC = 1; float4 colD = 1;
    colA = float4 (
        dot(_GradientBuffer[LatticeToBufferIndex(latticeIndex.xy)].vectors[0],localLatticePos),
        dot(_GradientBuffer[LatticeToBufferIndex(latticeIndex.xy)].vectors[1],localLatticePos),
        dot(_GradientBuffer[LatticeToBufferIndex(latticeIndex.xy)].vectors[2],localLatticePos),
        dot(_GradientBuffer[LatticeToBufferIndex(latticeIndex.xy)].vectors[3],localLatticePos)
    );
    colB = float4 (
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x,latticeIndex.y+1))].vectors[0],localLatticePos - float2(0,1)),
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x,latticeIndex.y+1))].vectors[1],localLatticePos - float2(0,1)),
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x,latticeIndex.y+1))].vectors[2],localLatticePos - float2(0,1)),
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x,latticeIndex.y+1))].vectors[3],localLatticePos - float2(0,1))
    );
    colC = float4 (
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x+1,latticeIndex.y+1))].vectors[0],localLatticePos - float2(1,1)),
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x+1,latticeIndex.y+1))].vectors[1],localLatticePos - float2(1,1)),
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x+1,latticeIndex.y+1))].vectors[2],localLatticePos - float2(1,1)),
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x+1,latticeIndex.y+1))].vectors[3],localLatticePos - float2(1,1))
    );
    colD = float4 (
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x+1,latticeIndex.y))].vectors[0],localLatticePos - float2(1,0)),
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x+1,latticeIndex.y))].vectors[1],localLatticePos - float2(1,0)),
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x+1,latticeIndex.y))].vectors[2],localLatticePos - float2(1,0)),
        dot(_GradientBuffer[LatticeToBufferIndex(uint2(latticeIndex.x+1,latticeIndex.y))].vectors[3],localLatticePos - float2(1,0))
    );
    //? Smoothed local position
    float4 colAD = lerp(colA,colD,smoothedLocalLatticePos.x);
    float4 colBC = lerp(colB,colC,smoothedLocalLatticePos.x);
    float4 fragCol = lerp(colAD,colBC,smoothedLocalLatticePos.y);

    // //? Linear local position
    // float4 colAD = lerp(colA,colD,localLatticePos.x);
    // float4 colBC = lerp(colB,colC,localLatticePos.x);
    // float4 fragCol = lerp(colAD,colBC,localLatticePos.y);

    fragCol = sqrt(2)/2*fragCol + .5; //? manipulation to get color components into [0,1] range
    //? sus cols
    //? colB
    //? colC
    //? colD
    _NoiseTexture[id.xy] = fragCol;
    // _NoiseTexture[id.xy] = fragCol - saturate(fragCol); //? test to verify colors components are <=1
    // _NoiseTexture[id.xy] = saturate(fragCol) - fragCol; //? test to verify colors components are >=0
}

[numthreads(8,8,1)]
void GenerateLattice(uint3 id : SV_DISPATCHTHREADID) {
    if(id.x < 0 || id.x >= _LatticeTexWidth || id.y < 0 || id.y >= _LatticeTexHeight) {return;}

    uint hash = pcg_hash(_Seed);
    uint4 hash4d = pcg4d_hash(uint4(id.x,id.y,hash,pcg_hash(hash)));
    float4 randCol = float4(hash4d) / UINTMAXVALUE;
    float2 baseVec = float2(1,0); 
    _GradientBuffer[LatticeToBufferIndex(id.xy)].vectors[0] = RotateVec2(baseVec,randCol.x*TAU);
    _GradientBuffer[LatticeToBufferIndex(id.xy)].vectors[1] = RotateVec2(baseVec,randCol.y*TAU);
    _GradientBuffer[LatticeToBufferIndex(id.xy)].vectors[2] = RotateVec2(baseVec,randCol.z*TAU);
    _GradientBuffer[LatticeToBufferIndex(id.xy)].vectors[3] = RotateVec2(baseVec,randCol.w*TAU);
}
[numthreads(8,8,1)] 
void WrapLattice(uint3 id : SV_DISPATCHTHREADID) {
    bool onXEdge = id.x >= (_LatticeTexWidth - 1);
    bool onYEdge = id.y >= (_LatticeTexHeight - 1);
    if((!onXEdge && !onYEdge) || (id.x >= _LatticeTexWidth || id.y >= _LatticeTexHeight)) { 
        return;
    } else if (onXEdge && onYEdge) {
        _GradientBuffer[LatticeToBufferIndex(id.xy)] = _GradientBuffer[LatticeToBufferIndex(uint2(0,0))];
    } else if (onXEdge && !onYEdge) {
        _GradientBuffer[LatticeToBufferIndex(id.xy)] = _GradientBuffer[LatticeToBufferIndex(uint2(0,id.y))];
    } else if (!onXEdge && onYEdge) {
        _GradientBuffer[LatticeToBufferIndex(id.xy)] = _GradientBuffer[LatticeToBufferIndex(uint2(id.x,0))];
    }
}

