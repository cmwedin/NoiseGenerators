#include "/Includes/PRNG.cginc"
#define UINTMAXVALUE 4294967295.0 
#define TAU 6.283185307179586

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel GeneratePoints
#pragma kernel NormalizeTexture

RWTexture2D<float4> _NoiseTexture;
RWStructuredBuffer<float2> _PointsBuffer;
RWStructuredBuffer<uint> _MinMaxBuffer;
uint _Seed; //? the value used to generate the random hash
uint _TexWidth; //? the width of the generated texture in pixels
uint _TexHeight; //? the height of the generated texture in pixels
uint _PointCellWidth; //? the width of each cell per point, derived from texture size and number of points in dispatcher
uint _PointCellHeight; //? the height of each cell per point, derived from texture size and number of points in dispatcher
uint _CellXCount; //? the number of cells along the x axis
uint _CellYCount; //? the number of cells along the y axis
bool _Tiling; //? if the texture should be required to tile seamlessly
bool _Invert; //? if the values of the texture should be inverted
float4 _ChannelMask; //? the channel to store the generated noise in

uint CellToBufferIndex(uint2 CellIndex) {
    return CellIndex.x + CellIndex.y*_CellXCount; 
}

//?Constants
static const int minMaxAccuracy = 10000000;
static const int2 cellOffsets[9] = {
    int2(0,0),
    int2(1,0),
    int2(1,1),
    int2(0,1),
    int2(-1,1),
    int2(-1,0),
    int2(-1,-1),
    int2(0,-1),
    int2(1,-1)
};

float Worley(float2 pos, int2 cellIndex) {
    float minSqrDist = 1;
    for(int offsetIndex = 0; offsetIndex < 9; offsetIndex++) {
        int2 adjID = cellIndex + cellOffsets[offsetIndex];
        float2 pointOffset = float2(1,0);
        if(adjID.x < 0 || adjID.y < 0 || adjID.x >= int(_CellXCount) || adjID.y >= int(_CellYCount)) {
            if(_Tiling) {
                int2 wrappedID = int2(
                    (adjID.x + _CellXCount) % uint(_CellXCount),
                    (adjID.y + _CellYCount) % uint(_CellYCount)
                );
                for(int wrapOffsetIndex = 0; wrapOffsetIndex < 9; wrapOffsetIndex++) {
                    pointOffset = (_PointsBuffer[CellToBufferIndex(wrappedID)] + cellOffsets[wrapOffsetIndex]) - pos;
                    minSqrDist = min(minSqrDist,dot(pointOffset,pointOffset));
                }
            } else {
                continue;
            }
        } else {
            pointOffset = _PointsBuffer[CellToBufferIndex(adjID)] - pos;     
            minSqrDist = min(minSqrDist,dot(pointOffset,pointOffset));
        }
    }
    return sqrt(minSqrDist);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x < 0 || id.x >= _TexWidth || id.y < 0 || id.y >= _TexHeight) {return;}

    int2 cellIndex = int2(floor(id.x / _PointCellWidth),floor(id.y / _PointCellHeight));
    if(cellIndex.x >= int(_CellXCount)) {cellIndex.x = int(_CellXCount) - 1;}
    if(cellIndex.y >= int(_CellYCount)) {cellIndex.y = int(_CellYCount) - 1;}
    float2 pos = float2(id.x/float(_TexWidth),id.y/float(_TexHeight));
    
    float result = Worley(pos,cellIndex);
    if(_Invert) {
        result = 1 - result;
    }
    //? Tracks the minium and maximum values generated for normalization
    uint val = uint(result*minMaxAccuracy);
    InterlockedMin(_MinMaxBuffer[0],val);
    InterlockedMax(_MinMaxBuffer[1],val);

    //? Records the result on the texture
    _NoiseTexture[id.xy] = _NoiseTexture[id.xy] * (1-_ChannelMask) + result * _ChannelMask;
}

[numthreads(8,8,1)]
void GeneratePoints (uint3 id : SV_DISPATCHTHREADID) {
    if(id.x < 0 || id.x >= _CellXCount || id.y < 0 || id.y >= _CellYCount) {return;}

    uint hash = pcg_hash(_Seed);
    uint3 hash3d = pcg3d_hash(uint3(id.xy,hash));

    float2 cellPos = hash3d.xy / UINTMAXVALUE;
    uint2 pointPos = uint2(
        (id.x + cellPos.x) * _PointCellWidth,
        (id.y + cellPos.y) * _PointCellHeight
    );
    float2 pointPos01 = float2(pointPos.x / float(_TexWidth),pointPos.y / float(_TexHeight));
    _PointsBuffer[CellToBufferIndex(id.xy)] = pointPos01;
}

[numthreads(8,8,1)]
void NormalizeTexture(uint3 id : SV_DISPATCHTHREADID) {
    float minVal = float(_MinMaxBuffer[0]/float(minMaxAccuracy));
    float maxVal = float(_MinMaxBuffer[1]/float(minMaxAccuracy));
    float4 normalizedCol = (_NoiseTexture[id.xy] - minVal)/(maxVal - minVal);
    _NoiseTexture[id.xy] = _NoiseTexture[id.xy] * (1-_ChannelMask) + normalizedCol * _ChannelMask;
}
