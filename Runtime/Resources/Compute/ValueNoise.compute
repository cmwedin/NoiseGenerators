// Each #kernel tells which function to compile; you can have many kernels
#include "/Includes/PRNG.cginc"
#define UINTMAXVALUE 4294967295.0 

#pragma kernel CSMain
#pragma kernel GenerateLattice
#pragma kernel WrapLattice


RWTexture2D<float4> _NoiseTexture;
RWStructuredBuffer<float4> _LatticeBuffer; //? Stores the values of the random lattice
uint _Seed; //? the value used to generate the random hash
uint _TexWidth; //? the width of the generated texture in pixels
uint _TexHeight; //? the height of the generated texture in pixels
uint _LatticeSizeX; //? the horizontal seperation of the lattice used to generate the noise in pixels
uint _LatticeSizeY; //? the vertical seperation of the lattice used to generate the noise in pixels
uint _LatticeTexWidth; //? Total width of the lattice texture
uint _LatticeTexHeight; //? Total height of the lattice texture

uint LatticeToBufferIndex(uint2 latticeIndex) {
    return latticeIndex.x + latticeIndex.y*_LatticeTexWidth; 
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if(id.x < 0 || id.x >= _TexWidth || id.y < 0 || id.y >= _TexHeight) {return;}

    float2 globalLatticePos = id.xy / float2(_LatticeSizeX,_LatticeSizeY);
    float2 localLatticePos = frac(globalLatticePos);
    int2 latticeIndex = floor(globalLatticePos);
    localLatticePos = localLatticePos * localLatticePos * (3.0 - 2.0 * localLatticePos); //?alternate cubic pos for smoother transitions
    float4 colA = lerp(
        _LatticeBuffer[LatticeToBufferIndex(uint2(latticeIndex.x,latticeIndex.y))],
        _LatticeBuffer[LatticeToBufferIndex(uint2(latticeIndex.x+1,latticeIndex.y))],
        localLatticePos.x
    );
    float4 colB = lerp(
        _LatticeBuffer[LatticeToBufferIndex(uint2(latticeIndex.x,latticeIndex.y+1))],
        _LatticeBuffer[LatticeToBufferIndex(uint2(latticeIndex.x+1,latticeIndex.y+1))],
        localLatticePos.x
    );
    float4 fragCol = lerp(colA,colB,localLatticePos.y);
    _NoiseTexture[id.xy] = fragCol ;
}

[numthreads(8,8,1)]
void GenerateLattice(uint3 id : SV_DISPATCHTHREADID) {
    if(id.x < 0 || id.x >= _LatticeTexWidth || id.y < 0 || id.y >= _LatticeTexHeight) {return;}
    
    uint hash = pcg_hash(_Seed);
    uint4 hash4d = pcg4d_hash(uint4(id.x,id.y,hash,pcg_hash(hash)));
    _LatticeBuffer[LatticeToBufferIndex(id.xy)] = float4(hash4d) / UINTMAXVALUE;
}
[numthreads(8,8,1)] 
void WrapLattice(uint3 id : SV_DISPATCHTHREADID) {
    bool onXEdge = id.x >= (_LatticeTexWidth - 1);
    bool onYEdge = id.y >= (_LatticeTexHeight - 1);
    if((!onXEdge && !onYEdge) || (id.x >= _LatticeTexWidth || id.y >= _LatticeTexHeight)) { 
        return;
    } else if (onXEdge && onYEdge) {
        _LatticeBuffer[LatticeToBufferIndex(id.xy)] = _LatticeBuffer[LatticeToBufferIndex(uint2(0,0))];
    } else if (onXEdge && !onYEdge) {
        _LatticeBuffer[LatticeToBufferIndex(id.xy)] = _LatticeBuffer[LatticeToBufferIndex(uint2(0,id.y))];
    } else if (!onXEdge && onYEdge) {
        _LatticeBuffer[LatticeToBufferIndex(id.xy)] = _LatticeBuffer[LatticeToBufferIndex(uint2(id.x,0))];
    }
}