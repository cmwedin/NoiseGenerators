#include "/Includes/PRNG.compute"
#define UINTMAXVALUE 4294967295.0 
#define TAU 6.283185307179586

#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _InNoiseTexture;
RWTexture2D<float4> _OutNoiseTexture;
uint _Octaves; //? Number of octaves of noise to add onto itself
float _Lacunarity; //? The factor the coordinates of the texture should be scaled by each octave
float _Gain; //? The factor the value should be scaled by each octave
uint _TexWidth; //? the width of the generated texture in pixels
uint _TexHeight; //? the height of the generated texture in pixels

float4 SampleScaledTexture(uint2 coords,float frequency) {
    float2 scaledCoords = coords / frequency;
    uint2 intCoords = floor(scaledCoords);
    float2 fractCoords = frac(scaledCoords);
    // float4 bottomMix = lerp(
    //     _InNoiseTexture[intCoords],
    //     _InNoiseTexture[uint2(intCoords.x+1, intCoords.y)],
    //     fractCoords.x
    // );
    // float4 topMix = lerp(
    //     _InNoiseTexture[uint2(intCoords.x, intCoords.y + 1)],
    //     _InNoiseTexture[intCoords + 1],
    //     fractCoords.x
    // );
    // return lerp(bottomMix,topMix,fractCoords.y);
    return _InNoiseTexture[intCoords];
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float4 value = 0;
    float amplitude = 0.5;
    float frequency = 1.0;
    
    for(uint i = 0; i < _Octaves; i++) {
        value += amplitude * SampleScaledTexture(id.xy,frequency);
        amplitude *= _Gain;
        frequency *= _Lacunarity;
    }
    _OutNoiseTexture[id.xy] = value;

}
